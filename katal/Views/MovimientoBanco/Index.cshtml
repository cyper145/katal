@{
    ViewBag.Title = "GridView";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Head {
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/GridView.css")" />
    <script type="text/javascript" src="@Url.Content("~/Content/GridView.js")"></script>
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/SignInRegister.css")" />
    <script type="text/javascript" src="@Url.Content("~/Content/SignInRegister.js")"></script>
    <style>
        .edit_form .editFormButton {
            width: calc(20% - 2px);
        }

        form.edit_form {
            margin: 30px 20px
        }
    </style>

    <script>

  
           
        

        function OnGridArticuloRowClick(s, e) {
            var g = gridLookup.GetGridView();
            g.GetRowValues(e.visibleIndex, 'description;unidad', OnGetRowArticuloValues);
        }
        function OnGetRowArticuloValues(Value) {
            console.log(Value[0]);
            var data = document.getElementById("grid_DXEFL_DXEditor2_I");
            data.value = Value[1];
        }
        function OnTipo(s, e) {
           
            console.log(CB_C_MODO.GetValue());
            $.getJSON('/MovimientoBanco/changeTipo?tipo=' + CB_C_MODO.GetValue(), function (resp) {
                $.each(resp, function (k, v) {

                    console.log("holas2");
                    //ver que se muestre 
                });
            });
        }
        function initTipo(s, e) {
            if (CB_C_MODO.GetValue() == null) {
                CB_C_MODO.SetValue(0);
            }
            $.getJSON('/MovimientoBanco/changeTipo?tipo=' + CB_C_MODO.GetValue(), function (resp) {
                $.each(resp, function (k, v) {

                    console.log("holas");

                    //ver que se muestre 
                });
            });
        }
        function dateInit() {

            if (CB_D_FECHA.GetText() == "") {
                let f = new Date();
                CB_D_FECHA.SetText(f.getDate() + "/" + (f.getMonth() + 1) + "/" + f.getFullYear());
            }
            if (CB_D_FECCOB.GetText() == "") {
                let f = new Date();
                CB_D_FECCOB.SetText(f.getDate() + "/" + (f.getMonth() + 1) + "/" + f.getFullYear());
            }
          
            
        }

        function dateInitD() {        
            if (CB_D_FECDC.GetText() == "") {
                let f = new Date();
                CB_D_FECDC.SetText(f.getDate() + "/" + (f.getMonth() + 1) + "/" + f.getFullYear());
            }

        }
        function OnToolbarItemClick(s, e) {
            if (!IsCustomExportToolbarCommand(e.item.name))
                return;
            var $exportFormat = $('#customExportCommand');
            $exportFormat.val(e.item.name);
            $('form').submit();
            window.setTimeout(function () {
                $exportFormat.val("");
            }, 0);
        }
        function IsCustomExportToolbarCommand(command) {
            return command == "CustomExportToXLS" || command == "CustomExportToXLSX";
        }

        // cambios para bancos
        function OnGridChangeOperacion(s, e) {
            console.log(gridLookupOpciones.GetValue());

            $.getJSON('/MovimientoBanco/changeOperacion?codigoOperacion=' + gridLookupOpciones.GetValue(), function (resp) {
                $.each(resp, function (k, v) {
                   
                   gridLookupTipoAnexo.SetVisible(v);
                    gridLookupAnexo.SetVisible(v);
                   

                });
            });
        }

        function initSecuencia(s, e) {
            $.getJSON('/MovimientoBanco/Initsecuencia', function (resp) {
                $.each(resp, function (k, v) {
                    CB_C_SECUE.SetText(v);

                });
            });
        }
        function initSecuenciaDetalle(s, e) {
            $.getJSON('/MovimientoBanco/initSecuenciaDetalle?secuencia=' + CB_C_SECUE.GetText(), function (resp) {
                $.each(resp, function (k, v) {
                    CB_C_SECDE.SetText(v);

                    console.log(CB_C_SECDE.GetText(v));
                });
            });
        }
        function OnGridDatatipoDoc(s, e) {
            $.getJSON('/Comprobante/CargarTipoDocumento', function (resp) {
                $.each(resp, function (k, v) {
                    if (v.TIPDOC_REFERENCIA) {
                        RCO_SERIE.SetReadOnly(false);
                        gridLookupTipoDocRef.SetReadOnly(false);
                        RCO_NUMERO.SetReadOnly(false);

                    }
                    else {

                        RCO_SERIE.SetReadOnly(true);
                        gridLookupTipoDocRef.SetReadOnly(true);
                        RCO_NUMERO.SetReadOnly(true);
                    }


                });
            });
        }
        //teclas acceso 
        function KeyDownModo(s, e) {

            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                gridLookupOpciones.Focus();
            }

        }
        function KeyDownOpciones(s, e) {

            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                gridLookupTipoDoc.Focus();
            }

        }
        function KeyDownTipoDoc(s, e) {

            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                serie.Focus();
            }
        }
        function KeyDownSerie(s, e) {

            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                CB_C_DOCUM.Focus();
            }
        }
        function KeyDownDocum(s, e) {

            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                gridLookupTipoAnexo.Focus();
            }
        }
        function KeyDownTipoAnexo(s, e) {

            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                gridLookupAnexo.Focus();
            }
        }
        function KeyDownAnexo(s, e) {

            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                gridLookupMoneda.Focus();
            }
        }
        function KeyDownMoneda(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                CB_D_FECHA.Focus();
            }
        }
        function KeyDownFechaGiro(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                CB_D_FECCOB.Focus();
            }
        }
        function KeyDownFechaCobro(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                CB_N_MTOMN.Focus();
            }
        }
        function KeyDownMonto(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                CB_A_REFER.Focus();
            }
        }
        function KeyDownReferencia(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                gridLookupEstados.Focus();
            }
        }
        function KeyDownEstado(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                gridLookupTiposMovimientos.Focus();
            }
        }
        function KeyDownTipoMovimiento(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                TC.Focus();
            }
        }
        function KeyDownTc(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                creditos.Focus();
            }
        }
        
        //para detalle 
        function KeyDownConceptoCajaBanco(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                gridLookupTipoAnexoD.Focus();
            }
        }
        function KeyDownTipoAnexoD(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                gridLookupAnexoD.Focus();
            }
        }
        function KeyDownAnexoD(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                gridLookupTipoDocD.Focus();
            }
        }
        function KeyDownTipoDocD(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                serieD.Focus();
            }
        }
        function KeyDownSerieD(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                CB_C_DOCUMD.Focus();
            }
        }
        function KeyDownDocumD(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                CB_D_FECDC.Focus();
            }
        }
        function KeyDownFecha(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                gridLookupTipoMoneda.Focus();
            }
        }
        function KeyDownTipoMoneda(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                CB_N_MTOMND.Focus();
            }
        }
        function KeyDownMontoD(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                gridLookupCostos.Focus();
            }
        }

        function KeyDownCentroCto(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                gridLookupCuenta.Focus();
            }
        }
        function KeyDownCuenta(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                gridLookupCuentaDestino.Focus();
            }
        }
        function KeyDownCuentaDestino(s, e) {
            let keyCode = e.htmlEvent.keyCode
            if (keyCode == 13) {
                CB_A_REFERD.Focus();
            }
        }
        function probando() {

            let objeto = recolectarInfo();
            objeto = JSON.stringify(objeto);
            $.getJSON('/MovimientoBanco/grabar?data=' + objeto, function (resp) {
                $.each(resp, function (k, v) {
                  
                });
            });s
        }
        /*string create = ",[CB_C_OPERA],[CB_D_FECHA]";
        create += ",[CB_C_TPDOC] ,[CB_C_DOCUM] ,[CB_C_ANEXO]  ,[CB_C_CONVE] ,[CB_N_CAMES] ,[CB_N_TIPCA],[CB_N_MTOMN]  
        ,[CB_N_MTOME] ,[CB_C_CONTA]";
        create += ",[CB_A_REFER]  ,[CB_C_ESTAD] ,[CB_D_FECCOB],[CB_TIPMOV] ,[CB_MEDIO] ,[CB_DMEDIO] ,[CB_USUARIO])";
        
        string CB_C_OPERA = GridViewHelper.ValidarRecuperar(dataForm["gridLookupOpciones$State"]);
            string CB_C_TPDOC = GridViewHelper.ValidarRecuperar(dataForm["gridLookupTipoDoc$State"]);
            string CB_C_ANEXO = GridViewHelper.ValidarRecuperar(dataForm["gridLookupAnexo$State"]);
            string CB_C_CONVE = GridViewHelper.ValidarRecuperar(dataForm["gridLookupMoneda$State"]);
            string CB_C_ESTAD = GridViewHelper.ValidarRecuperar(dataForm["gridLookupEstados$State"]);
            string CB_TIPMOV = GridViewHelper.ValidarRecuperar(dataForm["gridLookupTiposMovimientos$State"]);
        
        */


        function recolectarInfo() {


            let objeto = {
                "CB_C_SECUE": CB_C_SECUE.GetText(),
                "CB_C_MODO": CB_C_MODO.GetValue(),
                "CB_C_OPERA": gridLookupOpciones.GetValue() ? gridLookupOpciones.GetValue()[0] : null, 
                "CB_D_FECHA": CB_D_FECHA.GetValue(),
                "CB_C_DOCUM": CB_C_DOCUM.GetValue(),            
                "CB_C_TPDOC": gridLookupTipoDoc.GetValue() ? gridLookupTipoDoc.GetValue()[0] : null,
                "CB_C_ANEXO": gridLookupAnexo.GetValue() ? gridLookupAnexo.GetValue()[0] : null,
                "CB_C_CONVE": gridLookupMoneda.GetValue() ? gridLookupMoneda.GetValue()[0] : null, 
      
                "CB_A_REFER": CB_A_REFER.GetValue(),
                "CB_C_ESTAD": gridLookupEstados.GetValue() ? gridLookupEstados.GetValue()[0] : null,
                "CB_D_FECCOB": CB_D_FECCOB.GetValue(),              
                "CB_TIPMOV": gridLookupTiposMovimientos.GetValue() ? gridLookupTiposMovimientos.GetValue()[0] : null,
            
            }
        return objeto;
        }


    </script>
}
@section PageToolbar {
    @Html.DevExpress().Menu(menuSettings =>
{
    menuSettings.Name = "pageToolbar";

    menuSettings.ItemAutoWidth = false;
    menuSettings.AllowSelectItem = false;
    menuSettings.ApplyItemStyleToTemplates = true;

    menuSettings.SettingsAdaptivity.Enabled = true;
    menuSettings.SettingsAdaptivity.EnableAutoHideRootItems = true;
    menuSettings.SettingsAdaptivity.EnableCollapseRootItemsToIcons = true;
    menuSettings.SettingsAdaptivity.CollapseRootItemsToIconsAtWindowInnerWidth = 600;

    menuSettings.Width = Unit.Percentage(100);
    menuSettings.ControlStyle.SeparatorWidth = Unit.Pixel(0);
    menuSettings.ControlStyle.CssClass = "page-toolbar";

    menuSettings.Styles.Item.CssClass = "item";
    menuSettings.Styles.Item.VerticalAlign = VerticalAlign.Middle;
    menuSettings.Styles.Item.HorizontalAlign = HorizontalAlign.Left;
    menuSettings.Images.Item.Width = Unit.Pixel(16);
    menuSettings.Images.Item.Height = Unit.Pixel(16);

    menuSettings.Items.Add(item =>
    {
        item.Enabled = false;
        item.SetTemplateContent(template => ViewContext.Writer.Write("<h1>Movimiento de Banco</h1>"));
    });
    menuSettings.Items.Add(item =>
    {
        item.Name = "New";
        item.Text = "Nuevo";
        item.Alignment = MenuItemAlignment.Left;
        item.AdaptivePriority = 2;
        item.Image.Url = "Content/Images/add.svg";       
    });
    menuSettings.Items.Add(item =>
    {
        item.Name = "Edit";
        item.Text = "Editar";
        item.Alignment = MenuItemAlignment.Left;
        item.AdaptivePriority = 2;
        item.Image.Url = "Content/Images/edit.svg";
    });
    menuSettings.Items.Add(item =>
    {
        item.Name = "Delete";
        item.Text = "Eliminar";
        item.Alignment = MenuItemAlignment.Left;
        item.AdaptivePriority = 2;
        item.Image.Url = "Content/Images/delete.svg";
    });
    menuSettings.Items.Add(item =>
    {
        item.Name = "anular";
        item.Text = "Anular";
        item.Alignment = MenuItemAlignment.Left;
        item.AdaptivePriority = 2;
        item.Image.Url = "Content/Images/anular.svg";
    });
    menuSettings.Items.Add(item =>
    {
        item.Name = "contabilizar";
        item.Text = "contabilizar";
        item.Alignment = MenuItemAlignment.Left;
        item.AdaptivePriority = 2;
        item.Image.Url = "Content/Images/contabilidad.svg";
    });

    menuSettings.Items.Add(item =>
    {
        item.Name = "imprimirCaja";
        item.Text = "Imprimir";
        item.Alignment = MenuItemAlignment.Left;
        item.AdaptivePriority = 2;
        item.Image.Url = "Content/Images/print.svg";
    });
    menuSettings.Items.Add(item =>
    {
        item.Name = "ToggleFilterPanel";
        item.Text = "";
        item.GroupName = "Filter";
        item.Alignment = MenuItemAlignment.Left;
        item.AdaptivePriority = 1;
        item.Image.Url = "Content/Images/search.svg";
        item.Image.UrlChecked = "Content/Images/search-selected.svg";
    });
    menuSettings.ClientSideEvents.ItemClick = "onPageToolbarItemClick";
}).GetHtml()

    @Html.DevExpress().Panel(panelSettings =>
    {
        panelSettings.Name = "filterPanel";
    panelSettings.Collapsible = true;
    panelSettings.ControlStyle.CssClass = "filter-panel";

    panelSettings.SettingsCollapsing.ExpandEffect = PanelExpandEffect.Slide;
    panelSettings.SettingsCollapsing.AnimationType = AnimationType.None;
    panelSettings.SettingsCollapsing.ExpandButton.Visible = false;

    panelSettings.SetContent(() =>
        {
            Html.DevExpress().ButtonEdit(buttonEditSettings =>
            {
            buttonEditSettings.Name = "searchButtonEdit";
            buttonEditSettings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.Always;
            buttonEditSettings.Properties.Caption = "Search";
            buttonEditSettings.Width = Unit.Percentage(100);
        }).GetHtml();
    });

    panelSettings.ClientSideEvents.Expanded = "onFilterPanelExpanded";
    panelSettings.ClientSideEvents.Collapsed = "adjustPageControls";
}).GetHtml()
}

@section LeftPanelContent {
    @Html.Partial("~/Views/partialGeneral/LeftPanelPartial.cshtml");
}

@section RightPanelContent {
    <div class="settings-content">
        <h2>Settings</h2>
        <p>Place your content here</p>
    </div>
}
@Html.Partial("DateRangePicker2")
@Html.Partial("DateRangePicker")



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.Partial("DataRequisicionPartial")
}










