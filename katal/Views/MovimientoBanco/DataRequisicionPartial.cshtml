
@using katal.conexion.model.entity;

@using System.Drawing;
@using katal.Model;
@(Html.DevExpress().GridView<CMovimientoBanco>(settings => {
    settings.Name = "gridView";
    settings.Enabled = GridViewHelper.activeData;
    settings.CallbackRouteValues = new { Controller = "MovimientoBanco", Action = "DataRequisicionPartial" };
    settings.CustomActionRouteValues = new { Controller = "MovimientoBanco", Action = "GridViewCustomActionPartial" };
    settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "MovimientoBanco", Action = "RequisicionAddNewPartial" };
    settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "MovimientoBanco", Action = "RequisicionUpdatePartial" };
    settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.Control;
    settings.ControlStyle.CssClass = "grid-view";
    settings.Styles.Cell.Wrap = DefaultBoolean.False;
    settings.Styles.PagerBottomPanel.CssClass = "pager";
    settings.Styles.FocusedRow.CssClass = "focused";
    settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
    settings.SettingsPopup.EditForm.SettingsAdaptivity.MaxWidth = 1200;
    settings.SettingsPopup.EditForm.SettingsAdaptivity.Mode = PopupControlAdaptivityMode.Always;
    settings.SettingsPopup.EditForm.SettingsAdaptivity.VerticalAlign = PopupAdaptiveVerticalAlign.WindowCenter;
    settings.EditFormLayoutProperties.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
    settings.EditFormLayoutProperties.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 500;
    settings.EditFormLayoutProperties.UseDefaultPaddings = false;
    settings.EditFormLayoutProperties.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Top;
    settings.EditFormLayoutProperties.Styles.LayoutGroup.Cell.Paddings.Padding = Unit.Pixel(3);
    settings.EditFormLayoutProperties.Styles.LayoutItem.Paddings.PaddingBottom = Unit.Pixel(8);
    settings.Settings.ShowFilterRowMenu = true;
    settings.SettingsBehavior.AllowFocusedRow = true;
    // settings.SettingsBehavior.
    settings.KeyFieldName = "CB_C_SECUE";
    settings.Columns.Add(column =>
    {
        column.FieldName = "CB_C_SECUE";
        column.Caption = "Secuencia";

    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "CB_C_OPERA";
        column.Caption = "Operacion";

    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "CB_C_DOCUM";
        column.Caption = "Documento";

    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "CB_N_MTOMN";
        column.Caption = "Monto MN";
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "CB_L_CONTA";
        column.Caption = "Contab.";
    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "CB_L_ANULA";
        column.Caption = "Anulado";
    });

    //Anulado
    settings.Columns.Add(column =>
    {
        column.FieldName = "CB_D_FECCA";
        column.Caption = "Fecha.";
        column.ColumnType = MVCxGridViewColumnType.DateEdit;

    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "CB_C_ANEXO";
        column.Caption = "Anexo";
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "CB_A_REFER";
        column.Caption = "Glosa";
    });

    settings.SetEditFormTemplateContent(c =>
    {
        Html.DevExpress().FormLayout(layoutSetting =>
        {
            layoutSetting.Name = "FormLayoutSetting";
            layoutSetting.Width = Unit.Percentage(100);
            layoutSetting.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
            layoutSetting.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 700;
            layoutSetting.UseDefaultPaddings = false;
            var groupItem = layoutSetting.Items.AddGroupItem(groupSettings =>
            {
                groupSettings.Caption = "Registro de movimiento";
                //  groupSettings.ShowCaption = DefaultBoolean.False;
                groupSettings.GroupBoxDecoration = GroupBoxDecoration.Default;
                groupSettings.ColumnCount = 12;
            });
            groupItem.Items.Add(i =>
            {
                i.FieldName = "CB_C_SECUE";
                i.Caption = "Sec.";
                i.ColumnSpan = 2;
                i.NestedExtension().TextBox(t =>
                {
                    t.ReadOnly = true;
                });
            });
            groupItem.Items.Add(i =>
            {
                i.FieldName = "CB_C_MODO";
                i.Caption = "Tipo";   
                i.ColumnSpan = 2;
                i.NestedExtension().ComboBox(t =>
                {
                    t.SelectedIndex = 0;               
                    t.Properties.ValueType = typeof(string);
                    t.Properties.Items.Add("INGRESO", 0);
                    t.Properties.Items.Add("SALIDA", 1);
                    t.Properties.ValidationSettings.Display = Display.Dynamic;
                    t.ShowModelErrors = true;
                    t.Properties.ClientSideEvents.SelectedIndexChanged = "OnTipo";
                    t.Properties.ClientSideEvents.Init = "initTipo";
                });
            });
            groupItem.Items.Add(i =>
            {
                i.FieldName = "CB_C_OPERA";
                i.Caption = "Operacion";
                i.ColumnSpan = 8;

                i.SetNestedContent(() =>
                {
                    Html.RenderAction("MultiSelectOpciones", new { CB_C_CODIG = DataBinder.Eval(c.DataItem, "CB_C_OPERA") });
                });
            });
            groupItem.Items.Add(i =>
            {
                i.FieldName = "CB_C_TPDOC";
                i.Caption = "Dcmtos.";
                i.ColumnSpan = 4;
                i.SetNestedContent(() =>
                {
                    Html.RenderAction("MultiSelectTipoDoc", new { TIPDOC_CODIGO = DataBinder.Eval(c.DataItem, "CB_C_TPDOC") });
                });

            });
            groupItem.Items.Add(i =>
            {
                i.FieldName = "serie";


                i.ShowCaption = DefaultBoolean.False;
                i.ColumnSpan = 1;
                i.NestedExtension().TextBox(t =>
                {

                });
            });
            groupItem.Items.Add(i =>
            {

                i.FieldName = "CB_C_DOCUM";
                i.ShowCaption = DefaultBoolean.False;
                i.ColumnSpan = 1;
                i.NestedExtension().TextBox(t =>
                {

                });
            });

            groupItem.Items.Add(i =>

            {
                i.Name = "TipoAnexo";
                i.Caption = "Anexo";

                i.ColumnSpan = 3;
                i.SetNestedContent(() =>
                {
                    Html.RenderAction("MultiSelectTipoAnexo" );
                });
            });
            groupItem.Items.Add(i =>

            {
                i.FieldName = "CB_C_ANEXO";           
                i.ShowCaption = DefaultBoolean.False;
                i.ColumnSpan = 3;
                i.SetNestedContent(() =>
                {
                   
                    Html.RenderAction("MultiSelectAnexo", new { TIPOANEX_CODIGO = DataBinder.Eval(c.DataItem, "CB_C_ANEXO") });

                });
            });


            groupItem.Items.Add(i =>
            {
                i.FieldName = "CB_C_CONVE";
                i.Caption = "Conversion";
                //  i.ShowCaption = DefaultBoolean.False;
                i.ColumnSpan = 3;
                i.SetNestedContent(() =>
                {
                    Html.RenderAction("MultiSelectMoneda");
                });
            });
            groupItem.Items.Add(i =>
            {
                i.Name = "TCEsp";
                i.Caption = "T/C Esp";
                // i.ShowCaption = DefaultBoolean.False;
                i.ColumnSpan = 3;
                i.NestedExtension().TextBox(t =>
                {

                });
            });
            groupItem.Items.Add(i =>

            {
                i.FieldName = "CB_D_FECCA";
                i.ColumnSpan = 3;
                i.Caption = "Fecha Giro";
                i.RequiredMarkDisplayMode = FieldRequiredMarkMode.Hidden;
                i.NestedExtension().DateEdit(t =>
                {
                    t.Properties.ValidationSettings.Display = Display.Dynamic;
                    t.ShowModelErrors = true;
                    // t.Properties.ValidationSettings= ValidationSettings
                    //  t.Properties.AllowNull = true;
                    t.Properties.ClientSideEvents.Init = "dateInit";
                });
            });
            groupItem.Items.Add(i =>
            {
                i.FieldName = "CB_D_FECCOB";
                i.ColumnSpan = 3;
                i.Caption = "Fecha Cobro";
                i.RequiredMarkDisplayMode = FieldRequiredMarkMode.Hidden;
                i.NestedExtension().DateEdit(t =>
                {
                    t.Properties.ValidationSettings.Display = Display.Dynamic;
                    t.ShowModelErrors = true;
                });
            });
            groupItem.Items.Add(i =>
            {
                i.FieldName = "CB_N_MTOMN";
                i.ColumnSpan = 12;
                i.Caption = "Monto";

                i.NestedExtension().TextBox(t =>
                {

                    t.Properties.ValidationSettings.Display = Display.Dynamic;
                    t.ShowModelErrors = true;
                    t.Width = Unit.Percentage(25);

                });
            });
            groupItem.Items.Add(i =>
            {
                i.FieldName = "CB_A_REFER";
                i.ColumnSpan = 6;
                i.Caption = "Referencia";

                i.NestedExtension().TextBox(t =>
                {

                    t.Properties.ValidationSettings.Display = Display.Dynamic;
                    t.ShowModelErrors = true;

                });
            });
            groupItem.Items.Add(i =>

            {
                i.Name = "Estado";
                i.ColumnSpan = 2;
                i.Caption = "Estado";

                i.SetNestedContent(() =>
                {
                    Html.RenderAction("MultiSelectEstadosOperaciones");
                });
            });
            groupItem.Items.Add(i =>
            {
                i.Name = "TipoMovimiento";
                i.ColumnSpan = 3;
                i.Caption = "Tipo";
                i.SetNestedContent(() =>
                {
                    Html.RenderAction("MultiSelectTiposMovimientos");
                });
            });
            groupItem.Items.Add(i =>

            {
                i.Name = "TC:";
                i.ColumnSpan = 1;
                i.Caption = "T/C";

                i.NestedExtension().TextBox(t =>
                {

                    t.Properties.ValidationSettings.Display = Display.Dynamic;
                    t.ShowModelErrors = true;

                });
            });
            groupItem.Items.Add(i =>

            {
                i.Name = "medioPago:";
                i.ColumnSpan = 6;
                i.Caption = "Medio Pago";

                i.SetNestedContent(() =>
                {
                    Html.RenderAction("MultiSelectMedioPago");
                });
            });
            groupItem.Items.Add(i =>

            {
                i.Name = "creditos";
                i.ColumnSpan = 2;
                i.Caption = "Créditos";

                i.NestedExtension().CheckBox(t =>
                {
                    t.Properties.ValidationSettings.Display = Display.Dynamic;
                    t.ShowModelErrors = true;
                    //  t.ReadOnly = true;


                });
            });
            groupItem.Items.Add(i =>

            {
                i.Name = "Interface";
                i.ColumnSpan = 2;
                i.Caption = "Con Interface.";

                i.NestedExtension().CheckBox(t =>
                {
                    t.Properties.ValidationSettings.Display = Display.Dynamic;
                    t.ShowModelErrors = true;
                    //  t.ReadOnly = true;


                });
            });


            layoutSetting.Items.Add(itemSettings =>
            {

                itemSettings.ShowCaption = DefaultBoolean.False;
                itemSettings.SetNestedContent(() =>
                {
                    Html.RenderAction("Detail");
                });
            });

            layoutSetting.Items.Add(itemSettings =>
            {
                itemSettings.ShowCaption = DefaultBoolean.False;
            }).SetNestedContent(() =>
            {
                ViewContext.Writer.Write("<div style='float:right'>");
                Html.DevExpress().Button(
                    btnSettings =>
                    {
                        btnSettings.Name = "btnUpdate";
                        btnSettings.Text = "Grabar";
                        btnSettings.ClientSideEvents.Click = "function(s, e){ gridView.UpdateEdit(); }";
                       
                        //I want to Hide Update Button when FirstName is "John"

                    }).Render();

                Html.DevExpress().Button(
                    btnSettings =>
                    {
                        btnSettings.Name = "btnCancel";
                        btnSettings.Text = "Cancel";
                        btnSettings.Style[HtmlTextWriterStyle.MarginLeft] = "5px";
                        btnSettings.ClientSideEvents.Click = "function(s, e){ gridView.CancelEdit(); }";
                    }).Render();
                ViewContext.Writer.Write("</div>");
            });


        }).Bind(ViewData["Object"] ?? c.DataItem).Render();

    });

    settings.SettingsSearchPanel.CustomEditorName = "search";
    settings.SettingsBehavior.AllowFocusedRow = true;

    settings.SettingsExport.EnableClientSideExportAPI = true;
    settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.DataAware;
     settings.ClientSideEvents.FocusedRowChanged = "OnGridFocusedRowChangedRequision";
    settings.Width = Unit.Percentage(100);

    katal.Code.Helpers.GridViewFeaturesHelper.SetupGlobalGridViewBehavior(settings);
}).Bind(Model).SetEditErrorText(ViewBag.EditError).GetHtml())
