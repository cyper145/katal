
@using katal.conexion.model.entity
@using System.Drawing;

@(Html.DevExpress().GridView<RequisicionCompra>(settings => {
    settings.Name = "gridView";
    settings.CallbackRouteValues = new { Controller = "RequisionCompra", Action = "DataRequisicionPartial" };

    settings.CustomActionRouteValues = new { Controller = "RequisionCompra", Action = "GridViewCustomActionPartial" };
    settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "RequisionCompra", Action = "RequisicionAddNewPartial" };
    settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "RequisionCompra", Action = "RequisicionUpdatePartial" };



    settings.ControlStyle.CssClass = "grid-view";
    settings.Styles.Cell.Wrap = DefaultBoolean.False;
    settings.Styles.PagerBottomPanel.CssClass = "pager";
    settings.Styles.FocusedRow.CssClass = "focused";
    settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
    settings.SettingsPopup.EditForm.SettingsAdaptivity.MaxWidth = 1000;
    settings.SettingsPopup.EditForm.SettingsAdaptivity.Mode = PopupControlAdaptivityMode.Always;
    settings.SettingsPopup.EditForm.SettingsAdaptivity.VerticalAlign = PopupAdaptiveVerticalAlign.WindowCenter;

    settings.EditFormLayoutProperties.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
    settings.EditFormLayoutProperties.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 500;

    settings.EditFormLayoutProperties.UseDefaultPaddings = false;

    settings.EditFormLayoutProperties.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Top;
    settings.EditFormLayoutProperties.Styles.LayoutGroup.Cell.Paddings.Padding = Unit.Pixel(3);

    settings.EditFormLayoutProperties.Styles.LayoutItem.Paddings.PaddingBottom = Unit.Pixel(8);

    settings.Settings.ShowFilterRow = true;
    settings.Settings.ShowFilterRowMenu = true;

    settings.SettingsBehavior.AllowFocusedRow = true;
    // settings.SettingsBehavior.
    settings.KeyFieldName = "NROREQUI";
    settings.Columns.Add(column =>
    {
        column.FieldName = "prioridad";
        column.Caption = "Nro. Req.";
        column.Visible = false;
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "NROREQUI";
        column.Caption = "Nro. Req.";

    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "CODSOLIC";
        column.Caption = "Solicitante";

    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "AREA";
        column.Caption = "Area";
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "FECREQUI";
        column.Caption = "Fecha Req.";
        column.ColumnType = MVCxGridViewColumnType.DateEdit;

    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "ESTREQUI";
        column.Caption = "Estado";
    });

    settings.KeyboardSupport = true;
    /*
    t.Properties.Items.Add("NORMAL", 0);
    t.Properties.Items.Add("MEDIA", 1);
    t.Properties.Items.Add("ALTA", 2);
    */
    
    settings.Styles.FocusedRow.BackColor = Color.FromArgb(255, 255, 255);
    //settings.Styles.FocusedRow.BackgroundImage.ImageUrl = System.Web.VirtualPathUtility.ToAbsolute("~/Content/Images/transparent.png");
    settings.Styles.FocusedRow.ForeColor = Color.FromArgb(20, 20, 20);
    /*
    settings.Styles.SelectedRow.BackColor = Color.FromArgb(255, 255, 255);
   // settings.Styles.SelectedRow.BackgroundImage.ImageUrl = System.Web.VirtualPathUtility.ToAbsolute("~/Content/Images/transparent.png");
    settings.Styles.SelectedRow.ForeColor = Color.FromArgb(20, 20, 20);*/
    /*
    settings.FormatConditions.AddHighlight("NROREQUI", "[prioridad] ==2", GridConditionHighlightFormat.LightRedFillWithDarkRedText);
    settings.FormatConditions.AddHighlight("CODSOLIC", "[prioridad] ==2", GridConditionHighlightFormat.LightRedFillWithDarkRedText);
    settings.FormatConditions.AddHighlight("AREA", "[prioridad] ==2", GridConditionHighlightFormat.LightRedFillWithDarkRedText);
    settings.FormatConditions.AddHighlight("FECREQUI", "[prioridad] ==2", GridConditionHighlightFormat.LightRedFillWithDarkRedText);
    settings.FormatConditions.AddHighlight("ESTREQUI", "[prioridad] ==2", GridConditionHighlightFormat.LightRedFillWithDarkRedText);



    settings.FormatConditions.AddHighlight("NROREQUI", "[prioridad] ==1", GridConditionHighlightFormat.YellowFillWithDarkYellowText);
    settings.FormatConditions.AddHighlight("CODSOLIC", "[prioridad] ==1", GridConditionHighlightFormat.YellowFillWithDarkYellowText);
    settings.FormatConditions.AddHighlight("AREA", "[prioridad] ==1", GridConditionHighlightFormat.YellowFillWithDarkYellowText);
    settings.FormatConditions.AddHighlight("FECREQUI", "[prioridad] ==1", GridConditionHighlightFormat.YellowFillWithDarkYellowText);
    settings.FormatConditions.AddHighlight("ESTREQUI", "[prioridad] ==1", GridConditionHighlightFormat.YellowFillWithDarkYellowText);

    settings.FormatConditions.AddHighlight("NROREQUI", "[prioridad] ==0", GridConditionHighlightFormat.GreenFillWithDarkGreenText);
    settings.FormatConditions.AddHighlight("CODSOLIC", "[prioridad] ==0", GridConditionHighlightFormat.GreenFillWithDarkGreenText);
    settings.FormatConditions.AddHighlight("AREA", "[prioridad] ==0", GridConditionHighlightFormat.GreenFillWithDarkGreenText);
    settings.FormatConditions.AddHighlight("FECREQUI", "[prioridad] ==0", GridConditionHighlightFormat.GreenFillWithDarkGreenText);
    settings.FormatConditions.AddHighlight("ESTREQUI", "[prioridad] ==0", GridConditionHighlightFormat.GreenFillWithDarkGreenText);
    */


    // settings.FormatConditions.

    settings.SetEditFormTemplateContent(c =>
    {


        Html.DevExpress().FormLayout(layoutSetting =>
        {

            layoutSetting.Name = "FormLayoutSetting";

            layoutSetting.Width = Unit.Percentage(100);

            layoutSetting.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
            layoutSetting.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 700;
            layoutSetting.UseDefaultPaddings = false;



            var groupItem = layoutSetting.Items.AddGroupItem(groupSettings =>
            {
                groupSettings.Caption = "Nueva Requision ";
                groupSettings.ShowCaption = DefaultBoolean.False;
                groupSettings.GroupBoxDecoration = GroupBoxDecoration.Default;
                groupSettings.ColumnCount = 6;
            });
            groupItem.Items.Add(i =>
            {

                i.FieldName = "NROREQUI";
                i.Caption = "Nro. Requisición";

                i.ColumnSpan = 4;
                i.NestedExtension().TextBox(t =>
                {
                    t.ReadOnly = true;
                    t.Width = Unit.Percentage(25);
                    //t.Properties.ClientSideEvents.KeyPress=
                    // t.Properties.ClientSideEvents.Init = "onData";
                });
            });
            groupItem.Items.Add(i =>
            {
                i.FieldName = "FECREQUI";
                i.Caption = "Fecha:";
                i.ColumnSpan = 2;
                i.NestedExtension().DateEdit(t =>
                {
                    t.Properties.ValidationSettings.Display = Display.Dynamic;
                    t.ShowModelErrors = true;
                    t.Properties.ClientSideEvents.Init = "DateEmision";


                });
            });

            groupItem = layoutSetting.Items.AddGroupItem(groupSettings =>
            {

                groupSettings.ShowCaption = DefaultBoolean.False;
                groupSettings.GroupBoxDecoration = GroupBoxDecoration.None;
                groupSettings.ColumnCount = 6;
            });


            groupItem.Items.Add(i =>
            {
                i.FieldName = "CODSOLIC";
                i.Caption = "Solicitante";
                i.ColumnSpan = 3;
                i.SetNestedContent(() =>
                {
                    Html.RenderAction("MultiSelectSolicitante", new { TCLAVE = DataBinder.Eval(c.DataItem, "CODSOLIC") });
                });
            });
            groupItem.Items.Add(i =>

            {
                i.FieldName = "prioridad";
                i.Caption = "Prioridad";
                i.ColumnSpan = 3;
                i.NestedExtension().ComboBox(t =>
                {
                    t.SelectedIndex = 0;
                    t.Properties.ValueType = typeof(int);
                    t.Properties.Items.Add("NORMAL", 0);
                    t.Properties.Items.Add("MEDIA", 1);
                    t.Properties.Items.Add("ALTA", 2);

                    t.Properties.ValidationSettings.Display = Display.Dynamic;
                    t.ShowModelErrors = true;
                });
            });
            groupItem.Items.Add(i =>

            {
                i.FieldName = "AREA";
                i.Caption = "Area";

                i.ColumnSpan = 3;
                i.SetNestedContent(() =>
                {

                    Html.RenderAction("MultiSelectArea", new { AREA_CODIGO = DataBinder.Eval(c.DataItem, "AREA") });
                });
            });


            groupItem.Items.Add(i =>

            {
                i.FieldName = "FecEntrega";
                i.ColumnSpan = 3;
                i.Caption = "Fecha Probable Entrega";
                i.RequiredMarkDisplayMode = FieldRequiredMarkMode.Hidden;
                i.NestedExtension().DateEdit(t =>
                {
                    t.Properties.ValidationSettings.Display = Display.Dynamic;
                    t.ShowModelErrors = true;
                    // t.Properties.ValidationSettings= ValidationSettings
                    //  t.Properties.AllowNull = true;
                });
            });
            groupItem.Items.Add(i =>

            {
                i.FieldName = "GLOSA";
                i.ColumnSpan = 6;
                i.Caption = "Glosa";

                i.NestedExtension().TextBox(t =>
                {

                    t.Properties.ValidationSettings.Display = Display.Dynamic;
                    t.ShowModelErrors = true;

                });
            });

            layoutSetting.Items.Add(itemSettings =>
            {

                itemSettings.ShowCaption = DefaultBoolean.False;
                itemSettings.SetNestedContent(() =>
                {
                    Html.RenderAction("Detail", new { NROREQUI = DataBinder.Eval(c.DataItem, "NROREQUI") });
                });
            });
            layoutSetting.Items.Add(itemSettings =>
            {
                itemSettings.ShowCaption = DefaultBoolean.False;
            }).SetNestedContent(() =>
            {
                ViewContext.Writer.Write("<div style='float:right'>");
                Html.DevExpress().Button(
                    btnSettings =>
                    {
                        btnSettings.Name = "btnUpdate";
                        btnSettings.Text = "Grabar";
                        btnSettings.ClientSideEvents.Click = "function(s, e){ gridView.UpdateEdit(); }";

                        //I want to Hide Update Button when FirstName is "John"

                    }).Render();

                Html.DevExpress().Button(
                    btnSettings =>
                    {
                        btnSettings.Name = "btnCancel";
                        btnSettings.Text = "Cancel";
                        btnSettings.Style[HtmlTextWriterStyle.MarginLeft] = "5px";
                        btnSettings.ClientSideEvents.Click = "function(s, e){ gridView.CancelEdit(); }";
                    }).Render();
                ViewContext.Writer.Write("</div>");
            });


        }).Bind(ViewData["Object"] ?? c.DataItem).Render();

    });

    settings.SettingsSearchPanel.CustomEditorName = "search";
    settings.SettingsBehavior.AllowFocusedRow = true;

    settings.SettingsExport.EnableClientSideExportAPI = true;
    settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.DataAware;
    settings.ClientSideEvents.FocusedRowChanged = "OnGridFocusedRowChangedRequision";
    settings.Width = Unit.Percentage(100);

    katal.Code.Helpers.GridViewFeaturesHelper.SetupGlobalGridViewBehavior(settings);
}).Bind(Model).SetEditErrorText(ViewBag.EditError).GetHtml())
