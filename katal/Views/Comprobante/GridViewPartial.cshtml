
@using katal.conexion.model.entity;
@using katal.Model;
@model List<Comprobante>
@{

    var gridView = Html.DevExpress().GridView<Comprobante>(gridViewSettings =>
    {
        gridViewSettings.Name = "gridView";
        gridViewSettings.KeyFieldName = "codigo";

        gridViewSettings.CallbackRouteValues = new
        {
            Controller = "Comprobante",
            Action = "GridViewPartial"
        };
        gridViewSettings.CustomActionRouteValues = new { Controller = "Comprobante", Action = "GridViewCustomActionPartial" };
        gridViewSettings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Comprobante", Action = "GridViewAddNewPartial" };
        gridViewSettings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Comprobante", Action = "GridViewUpdatePartial" };



        gridViewSettings.EnablePagingGestures = AutoBoolean.False;

        gridViewSettings.ControlStyle.CssClass = "grid-view";
        gridViewSettings.Width = Unit.Percentage(100);
        gridViewSettings.Height = Unit.Percentage(100);

        gridViewSettings.Styles.Cell.Wrap = DefaultBoolean.False;
        gridViewSettings.Styles.PagerBottomPanel.CssClass = "pager";
        gridViewSettings.Styles.FocusedRow.CssClass = "focused";

        gridViewSettings.SettingsBehavior.AllowFocusedRow = true;
        //    gridViewSettings.SettingsBehavior.AllowSelectByRowClick = true;
        gridViewSettings.SettingsBehavior.AllowEllipsisInText = true;
        gridViewSettings.SettingsBehavior.AllowDragDrop = false;

        gridViewSettings.SettingsSearchPanel.CustomEditorName = "searchButtonEdit";
        gridViewSettings.SearchPanelEditorCreate = (sender, e) =>
        {
            e.EditorProperties = new DateEditProperties();
        };
        gridViewSettings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
        gridViewSettings.SettingsEditing.EditFormColumnCount = 2;

        gridViewSettings.SettingsSearchPanel.CustomEditorName = "searchButtonEdit";

        gridViewSettings.Settings.VerticalScrollBarMode = ScrollBarMode.Hidden;
        gridViewSettings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
        gridViewSettings.Settings.ShowHeaderFilterButton = true;

        gridViewSettings.SettingsPager.PageSize = 50;
        gridViewSettings.SettingsPager.EnableAdaptivity = true;
        gridViewSettings.SettingsPager.PageSizeItemSettings.Visible = true;

        gridViewSettings.SettingsExport.EnableClientSideExportAPI = true;
        gridViewSettings.SettingsExport.ExportSelectedRowsOnly = true;

        gridViewSettings.SettingsPopup.EditForm.SettingsAdaptivity.MaxWidth = 1200;
        gridViewSettings.SettingsPopup.EditForm.SettingsAdaptivity.Mode = PopupControlAdaptivityMode.Always;
        gridViewSettings.SettingsPopup.EditForm.SettingsAdaptivity.VerticalAlign = PopupAdaptiveVerticalAlign.WindowCenter;

        gridViewSettings.EditFormLayoutProperties.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
        gridViewSettings.EditFormLayoutProperties.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 1200;

        gridViewSettings.EditFormLayoutProperties.UseDefaultPaddings = false;

        gridViewSettings.EditFormLayoutProperties.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Top;

        gridViewSettings.EditFormLayoutProperties.Styles.LayoutGroup.Cell.Paddings.Padding = Unit.Pixel(3);

        gridViewSettings.EditFormLayoutProperties.Styles.LayoutItem.Paddings.PaddingBottom = Unit.Pixel(8);



        gridViewSettings.SetEditFormTemplateContent(c =>
        {


            Html.DevExpress().FormLayout(layoutSetting =>
            {
                layoutSetting.Name = "FormLayoutSetting";

                layoutSetting.Width = Unit.Percentage(100);

                layoutSetting.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
                layoutSetting.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 700;
                layoutSetting.UseDefaultPaddings = false;

                layoutSetting.ColumnCount = 12;

                var groupItem = layoutSetting.Items.AddGroupItem(groupSettings =>
                {
                    groupSettings.Caption = "Registro";
                    groupSettings.ShowCaption = DefaultBoolean.True;
                    groupSettings.GroupBoxDecoration = GroupBoxDecoration.Default;
                    groupSettings.ColumnCount = 12;
                    groupSettings.ColumnSpan = 12;
                });
                groupItem.Items.Add(i =>
                {

                    i.FieldName = "CORDEN";
                    i.Caption = "Nro. Orden";

                    i.ColumnSpan =6;
                    i.NestedExtension().TextBox(t =>
                    {
                        t.ReadOnly = true;
                        t.Width = Unit.Percentage(25);
                        // t.Properties.ClientSideEvents.Init = "onData";
                    });
                });
                groupItem.Items.Add(i =>
                {
                    i.FieldName = "CCONCEPT";
                    i.Caption = "Concepto";
                    i.ColumnSpan = 2;
                    i.SetNestedContent(() =>
                    {
                        Html.RenderAction("MultiSelectGasto", new { Gastos_Codigo = DataBinder.Eval(c.DataItem, "CCONCEPT") });
                    });
                });
                groupItem.Items.Add(i =>
                {

                    i.FieldName = "descriptionGasto";
                    i.ShowCaption = DefaultBoolean.False;
                    i.ColumnSpan = 4;
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                        t.ReadOnly = true;
                        // t.Width = Unit.Percentage(25);
                        // t.Properties.ClientSideEvents.Init = "onData";
                    });
                });
                groupItem.Items.Add(i =>
                {
                    i.FieldName = "CTIPPROV";
                    i.Caption = "Anexo";
                    i.ColumnSpan =2;
                    i.SetNestedContent(() =>
                    {
                        Html.RenderAction("MultiSelectTipoAnexo", new { TIPOANEX_CODIGO = DataBinder.Eval(c.DataItem, "CCONCEPT") });
                    });
                });

                groupItem.Items.Add(i =>
                {
                    i.FieldName = "descriptiontipoAnexo";
                    i.ShowCaption = DefaultBoolean.False;
                    i.ColumnSpan = 4;
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                        t.ReadOnly = true;
                    });
                });

                groupItem.Items.Add(i =>
                {
                    i.FieldName = "ANEX_CODIGO";
                    i.ShowCaption = DefaultBoolean.False;
                    i.ColumnSpan = 2;
                    i.SetNestedContent(() =>
                    {
                        Html.RenderAction("MultiSelectAnexo", new { ANEX_CODIGO = DataBinder.Eval(c.DataItem, "ANEX_CODIGO") });
                    });
                });
                groupItem.Items.Add(i =>
                {
                    i.FieldName = "ANEX_DESCRIPCION";
                    i.ShowCaption = DefaultBoolean.False;
                    i.ColumnSpan = 4;
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                        t.ReadOnly = true;
                    });
                });
                groupItem.Items.Add(i =>

                {
                    i.FieldName = "TIPODOCU_CODIGO";
                    i.Caption ="Documento";
                    i.ColumnSpan = 2;

                    i.SetNestedContent(() =>
                    {
                        Html.RenderAction("MultiSelectTipoDoc", new { TIPDOC_CODIGO = DataBinder.Eval(c.DataItem, "TIPODOCU_CODIGO") });
                    });
                });

                groupItem.Items.Add(i =>

                {
                    i.FieldName = "descriptiontipoDocumento";
                    i.ShowCaption = DefaultBoolean.False;
                    i.ColumnSpan = 3;
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                        t.ReadOnly = true;
                    });
                });
                groupItem.Items.Add(i =>

                {
                    i.FieldName = "nose1";
                    i.ColumnSpan = 1;
                    i.ShowCaption = DefaultBoolean.False;
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                        t.ReadOnly = true;
                    });
                });
                groupItem.Items.Add(i =>

                {
                    i.FieldName = "nose2";
                    i.ColumnSpan = 1;
                    i.ShowCaption = DefaultBoolean.False;
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                        t.ReadOnly = true;
                    });
                });
                groupItem.Items.Add(i =>

                {
                    i.FieldName = "o/c-o/s";
                    i.ColumnSpan = 2;
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                        t.ReadOnly = true;
                    });
                });
                groupItem.Items.Add(i =>

                {
                    i.FieldName = "DRECEPCIO";
                    i.Caption ="Fech. Recep.";
                    i.ColumnSpan = 3;
                    i.NestedExtension().DateEdit(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                        t.ReadOnly = true;
                    });
                });

                //tercera fila
                groupItem.Items.Add(i =>

                {
                    i.FieldName = "DEMISION";
                    i.Caption = "Fech. Emi.";
                    i.ColumnSpan = 3;
                    i.NestedExtension().DateEdit(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                        t.ReadOnly = true;
                    });
                });

                groupItem.Items.Add(i =>

                {
                    i.FieldName = "dias";
                    i.ColumnSpan = 2;
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                        t.ReadOnly = true;
                    });
                });
                groupItem.Items.Add(i =>

                {
                    i.FieldName = "DVENCE";
                    i.Caption = "Fech. Venc.";
                    i.ColumnSpan = 3;
                    i.NestedExtension().DateEdit(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                        t.ReadOnly = true;
                    });
                });

                groupItem.Items.Add(i =>

                {
                    i.FieldName = "transferir";
                    i.Caption = "Transferir a cuentas por pagar";
                    i.ColumnSpan = 4;
                    i.NestedExtension().CheckBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                        t.ReadOnly = true;
                    });
                });


                // cuarta fila

                groupItem = layoutSetting.Items.AddGroupItem(groupSettings =>
                {
                    groupSettings.Caption = "Converion Monetaria";
                    groupSettings.ShowCaption = DefaultBoolean.True;
                    groupSettings.GroupBoxDecoration = GroupBoxDecoration.Default;
                    groupSettings.ColumnCount = 12;
                    groupSettings.ColumnSpan = 6;
                });



                groupItem.Items.Add(i =>
                {
                    i.FieldName = "moneda";
                    i.ColumnSpan = 3;
                    i.Caption = "moneda";
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;


                    });

                });


                groupItem.Items.Add(i =>

                {
                    i.FieldName = "COVMON_CODIGO";
                    i.ColumnSpan = 3;
                    i.ShowCaption = DefaultBoolean.False;
                    i.NestedExtension().ComboBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                        t.SelectedIndex = 0;
                        t.Properties.ValueType = typeof(string);
                        t.Properties.Items.Add("T/C COMPRA", "COM");
                        t.Properties.Items.Add("T/C ESPECIAL ", "ESP");
                        t.Properties.Items.Add("T/C  OTRA FECHA ", "FEC");
                        t.Properties.Items.Add("T/C VENTA ", "VTA");
                        t.Properties.ClientSideEvents.SelectedIndexChanged = "onchangeCambio";

                    });
                });

                groupItem.Items.Add(i =>
                {
                    i.FieldName = "valor";
                    i.ColumnSpan =2;
                    i.ShowCaption = DefaultBoolean.False;
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                    });

                });


                groupItem.Items.Add(i =>

                {
                    i.FieldName = "OC_DFECDOC";
                    i.ColumnSpan = 4;
                    i.ShowCaption = DefaultBoolean.False;

                    i.NestedExtension().DateEdit(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                        t.Date = DateTime.Now;
                        t.Properties.ClientSideEvents.Init = "DateEmision";
                    });
                });

                groupItem.Items.Add(i =>
                {
                    i.FieldName = "t/c";
                    i.ColumnSpan = 6;
                    i.Caption ="T/C";
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                    });

                });
                groupItem.Items.Add(i =>
                {
                    i.FieldName = "t/c especial";
                    i.ColumnSpan = 6;
                    i.Caption = "T/C Especial";
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                    });

                });

                groupItem = layoutSetting.Items.AddGroupItem(groupSettings =>
                {
                    groupSettings.Caption = "Converion Compra";
                    groupSettings.ShowCaption = DefaultBoolean.False;
                    groupSettings.GroupBoxDecoration = GroupBoxDecoration.None;

                    groupSettings.ColumnCount = 12;
                    groupSettings.ColumnSpan = 6;
                });
                groupItem.Items.Add(i =>
                {
                    i.FieldName = "Acompras";
                    i.ColumnSpan = 12;
                    i.Caption = "A compras?";
                    i.NestedExtension().CheckBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                    });

                });

                groupItem.Items.Add(i =>
                {
                    i.FieldName = "Destino";
                    i.ColumnSpan = 4;
                    i.Caption = "Destino";
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                    });

                });
                groupItem.Items.Add(i =>
                {
                    i.FieldName = "Destino complemeto";
                    i.ColumnSpan = 8;
                    i.ShowCaption = DefaultBoolean.False;
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                    });

                });

                groupItem.Items.Add(i =>
                {
                    i.FieldName = "igvaplicar";
                    i.ColumnSpan = 6;
                    i.Caption = "igv por Aplicar";
                    i.NestedExtension().CheckBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                    });

                });
                groupItem.Items.Add(i =>
                {
                    i.FieldName = "defraccion";
                    i.ColumnSpan = 6;
                    i.Caption = "defraccion";
                    i.NestedExtension().ButtonEdit(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                    });

                });


                groupItem = layoutSetting.Items.AddGroupItem(groupSettings =>
                {
                    groupSettings.Caption = "Montos";

                    groupSettings.GroupBoxDecoration = GroupBoxDecoration.Default;

                    groupSettings.ColumnCount = 12;
                    groupSettings.ColumnSpan = 12;
                });

                groupItem.Items.Add(i =>
                {
                    i.FieldName = "TASAIGV";
                    i.ColumnSpan = 4;
                    i.Caption = "Tasa IGV";
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                    });

                });
                groupItem.Items.Add(i =>
                {
                    i.FieldName = "Baseimponible";
                    i.ColumnSpan = 4;
                    i.Caption = "Base imponible";
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                    });

                });
                groupItem.Items.Add(i =>
                {
                    i.FieldName = "Importe";
                    i.ColumnSpan = 4;
                    i.Caption = "Importe";
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                    });

                });
                groupItem.Items.Add(i =>
                {
                    i.FieldName = "MontoIgv";
                    i.ColumnSpan = 4;
                    i.Caption = "Monto Igv";
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                    });

                });
                groupItem.Items.Add(i =>
                {
                    i.FieldName = "MontoTotal";
                    i.ColumnSpan = 4;
                    i.Caption = "Monto Total";
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                    });

                });
                groupItem.Items.Add(i =>
                {
                    i.FieldName = "MontoPagar";
                    i.ColumnSpan = 4;
                    i.Caption = "Monto Pagar";
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                    });

                });




                groupItem = layoutSetting.Items.AddGroupItem(groupSettings =>
                {
                    groupSettings.Caption = "Detalles";

                    groupSettings.GroupBoxDecoration = GroupBoxDecoration.Default;

                    groupSettings.ColumnCount = 12;
                    groupSettings.ColumnSpan = 12;
                });

                groupItem.Items.Add(i =>
                {
                    i.FieldName = "responsable";
                    i.ColumnSpan =2;
                    i.Caption = "Responsable";
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                    });

                });
                groupItem.Items.Add(i =>
                {
                    i.FieldName = "responsableDescription";
                    i.ColumnSpan = 4;
                    i.ShowCaption = DefaultBoolean.False;
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                    });

                });
                groupItem.Items.Add(i =>
                {
                    i.FieldName = "glosa";
                    i.ColumnSpan = 6;
                    i.RowSpan = 2;
                    i.Caption = "glosa";
                    i.NestedExtension().Memo(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;
                        t.Properties.Rows = 2;
                    });

                });
                groupItem.Items.Add(i =>
                {
                    i.FieldName = "Formapago";
                    i.ColumnSpan = 6;
                    i.Caption = "Forma Pago";
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;

                    });

                });

                groupItem = layoutSetting.Items.AddGroupItem(groupSettings =>
                {
                    groupSettings.Caption = "otros";
                    groupSettings.ShowCaption = DefaultBoolean.False;
                    groupSettings.GroupBoxDecoration = GroupBoxDecoration.None;

                    groupSettings.ColumnCount = 12;
                    groupSettings.ColumnSpan = 6;
                });

                groupItem.Items.Add(i =>
                {
                    i.FieldName = "RefComprobante";
                    i.ColumnSpan = 2;
                    i.Caption = "Ref.Comprobante";
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;

                    });

                });
                groupItem.Items.Add(i =>
                {
                    i.FieldName = "dat1";
                    i.ColumnSpan = 2;
                    i.ShowCaption =DefaultBoolean.False;
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;

                    });

                });
                groupItem.Items.Add(i =>
                {
                    i.FieldName = "dat2";
                    i.ColumnSpan = 4;
                    i.ShowCaption = DefaultBoolean.False;
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;

                    });

                });
                groupItem.Items.Add(i =>
                {
                    i.FieldName = "dat3";
                    i.ColumnSpan = 4;
                    i.ShowCaption = DefaultBoolean.False;
                    i.NestedExtension().TextBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;

                    });

                });
                groupItem.Items.Add(i =>
                {
                    i.FieldName = "RentaDomiciliado";
                    i.ColumnSpan = 12;
                    i.Caption = "Renta No Domiciliado";
                    i.NestedExtension().CheckBox(t =>
                    {
                        t.Properties.ValidationSettings.Display = Display.Dynamic;
                        t.ShowModelErrors = true;

                    });

                });


                layoutSetting.Items.Add(itemSettings =>
                {
                    itemSettings.ColumnSpan = 12;
                    itemSettings.ShowCaption = DefaultBoolean.False;
                }).SetNestedContent(() =>
                {
                    ViewContext.Writer.Write("<div style='float:right'>");
                    Html.DevExpress().Button(
                        btnSettings =>
                        {
                            btnSettings.Name = "btnUpdate";
                            btnSettings.Text = "Grabar";
                            btnSettings.ClientSideEvents.Click = "function(s, e){ gridView.UpdateEdit(); }";

                            //I want to Hide Update Button when FirstName is "John"

                        }).Render();

                    Html.DevExpress().Button(
                        btnSettings =>
                        {
                            btnSettings.Name = "btnCancel";
                            btnSettings.Text = "Cancel";
                            btnSettings.Style[HtmlTextWriterStyle.MarginLeft] = "5px";
                            btnSettings.ClientSideEvents.Click = "function(s, e){ gridView.CancelEdit(); }";
                        }).Render();
                    ViewContext.Writer.Write("</div>");
                });


            }).Bind(ViewData["Object"] ?? c.DataItem).Render();

        });


        gridViewSettings.Columns.Add(columnSettings =>
        {
            columnSettings.FieldName = "codigo";
            columnSettings.Caption = "Fecha d";
            columnSettings.Width = Unit.Pixel(300);
        });

        gridViewSettings.Columns.Add(columnSettings =>
        {
            columnSettings.FieldName = "DEMISION";
            columnSettings.Caption = "Fecha";
            columnSettings.Width = Unit.Pixel(300);
        });



        gridViewSettings.Columns.Add(columnSettings =>
        {
            columnSettings.FieldName = "TIPOMON_CODIGO";
            columnSettings.Caption = "MON.";
            columnSettings.Width = Unit.Pixel(200);
        });
        gridViewSettings.Columns.Add(columnSettings =>
        {
            columnSettings.FieldName = "NIGV";
            columnSettings.Caption = "I.G.V";
            columnSettings.Width = Unit.Pixel(70);
        });
        gridViewSettings.Columns.Add(columnSettings =>
        {
            columnSettings.FieldName = "NIMPORTE";
            columnSettings.Caption = "Importe";
            columnSettings.Width = Unit.Pixel(170);

        });



        gridViewSettings.ClientSideEvents.SelectionChanged = "onGridViewSelectionChanged";
        gridViewSettings.ClientSideEvents.BeginCallback = "onGridViewBeginCallback";
        //gridViewSettings.ClientSideEvents.FocusedRowChanged = "OnGridFocusedRowChangedComprobante";


        gridViewSettings.CellEditorInitialize = (s, e) =>
        {
            ((ASPxEdit)e.Editor).ValidationSettings.Display = Display.Dynamic;
        };
    });
    if (ViewBag.GeneralError != null)
    {
        gridView.SetEditErrorText(ViewBag.GeneralError);
    }
}

@gridView.Bind(Model).GetHtml()

